<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="./public/base.css" />
    <script src="./public/src/index.js" type="module"></script>
    <title>Document</title>
  </head>
  <body>
    <div class="app">
      <!-- <div class="owner-host">
        <% if (user) { %> <%- include('vkOwner'), {user:user} %> <% } %>
      </div> -->
      <div class="friends-host">
        <header>
          <h1>Выберите друзей</h1>
          <button class="close-button"></button>
        </header>
        <div class="filter-host">
          <input
            type="text"
            name="filter"
            class="filter filter-main-folder"
            placeholder="фильтр по имени"
          />
          <input
            type="text"
            name="filter"
            class="filter filter-select-folder"
            placeholder="фильтр по имени"
          />
        </div>
        <div class="outer">
          <div class="main-panel panel">
            <div class="friends-folder folder-main"></div>
          </div>
          <div class="select-panel panel">
            <div class="friends-folder folder-select"></div>
          </div>
        </div>
        <footer></footer>
      </div>
    </div>

    <script type="module">
      import { User } from "./public/components/user/user.js";
      const friendsHost = document.querySelector(".friends-folder");
      const mainFolder = document.querySelector(".folder-main");
      const selectFolder = document.querySelector(".folder-select");
      let dragFriend;

      [mainFolder, selectFolder].forEach((folder) => {
        folder.addEventListener("dragover", (e) => {
          e.preventDefault();
          e.dataTransfer.dropEffect = "move";
        });

        function moveFriend(target) {
          if (target.classList.contains("folder-select")) {
            dragFriend.setState(true);
            friendTransfer(dragFriend, dragFriend.parentNode, selectFolder);
          } else if (target.classList.contains("folder-main")) {
            dragFriend.setState(false);
            friendTransfer(dragFriend, dragFriend.parentNode, mainFolder);
          }
        }
        folder.addEventListener("drop", (e) => {
          e.stopPropagation();
          e.preventDefault();
          e.target.tagName === "VK-USER"
            ? moveFriend(e.target.parentNode)
            : moveFriend(e.target);
        });
      });

      let friendsItems;

      function addFriends(json, savedFriends) {
        const count = json.response.count;
        const friends = json.response.items;

        friends.forEach((friend) => {
          const user = new User(
            friend.id,
            `${friend.first_name} ${friend.last_name}`,
            friend.photo_max_orig
          );
          if (savedFriends.includes(friend.id)) {
            user.setState(true);
            selectFolder.appendChild(user);
          } else {
            mainFolder.appendChild(user);
          }
        });

        friendsItems = [...mainFolder.querySelectorAll("vk-user")];

        friendsItems.forEach((item) => {
          item.setAttribute("draggable", true);
          item.addEventListener("dragstart", (e) => {
            dragFriend = e.target;
          });
        });
      }

      /* ------------------ FILTER -------------------- */

      function filterFriends(friends, filter) {
        friends.forEach((item) => {
          if (item.getName().toLowerCase().startsWith(filter.toLowerCase())) {
            item.classList.remove("hide");
          } else {
            item.classList.add("hide");
          }
        });
      }

      const filters = [...document.querySelectorAll(".filter")];

      filters.forEach((filter) =>
        filter.addEventListener("keyup", (e) => {
          if (e.target.classList.contains("filter-main-folder")) {
            filterFriends(
              [...mainFolder.querySelectorAll("vk-user")],
              e.target.value
            );
          } else if (e.target.classList.contains("filter-select-folder")) {
            filterFriends(
              [...selectFolder.querySelectorAll("vk-user")],
              e.target.value
            );
          }
        })
      );

      /* ----------------- EVENT ON FRIEND ------------- */

      const friendTransfer = (friend, from, to) => {
        from.removeChild(friend);
        to.insertBefore(friend, to.firstChild);
      };

      mainFolder.addEventListener("click", (e) => {
        const friend = e.target;
        if (friend.tagName.toLowerCase() === "vk-user") {
          friend.setState(true);
          friendTransfer(friend, friend.parentNode, selectFolder);
        }
      });

      selectFolder.addEventListener("click", (e) => {
        const friend = e.target;
        if (friend.tagName.toLowerCase() === "vk-user") {
          friend.setState(false);
          friendTransfer(friend, friend.parentNode, mainFolder);
        }
      });

      /* -------------- LOCAL STORAGE ----------------- */
      window.addEventListener("load", () => {
        const savedFriends = localStorage.getItem("foldingFriends");
        fetch("http://127.0.0.1:1234/api/friends/get")
          .then((res) => res.json())
          .then((json) => {
            addFriends(json, savedFriends);
          })
          .catch((err) => console.log(err));
      });
      window.addEventListener("beforeunload", () => {
        localStorage.setItem(
          "foldingFriends",
          [...selectFolder.querySelectorAll("vk-user")].map((item) =>
            item.getId()
          )
        );
      });
    </script>
  </body>
</html>
